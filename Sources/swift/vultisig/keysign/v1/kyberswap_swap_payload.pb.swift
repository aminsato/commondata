// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: vultisig/keysign/v1/kyberswap_swap_payload.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct VSKyberSwapTransaction {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var from: String = String()

  public var to: String = String()

  public var data: String = String()

  public var value: String = String()

  public var gasPrice: String = String()

  public var gas: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct VSKyberSwapQuoteData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var amountIn: String = String()

  public var amountInUsd: String = String()

  public var amountOut: String = String()

  public var amountOutUsd: String = String()

  public var gas: String = String()

  public var gasUsd: String = String()

  public var data: String = String()

  public var routerAddress: String = String()

  public var transactionValue: String = String()

  public var additionalCostUsd: String = String()

  public var additionalCostMessage: String = String()

  public var gasPrice: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct VSKyberSwapQuote {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  public var message: String {
    get {return _storage._message}
    set {_uniqueStorage()._message = newValue}
  }

  public var data: VSKyberSwapQuoteData {
    get {return _storage._data ?? VSKyberSwapQuoteData()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {_uniqueStorage()._data = nil}

  public var requestID: String {
    get {return _storage._requestID}
    set {_uniqueStorage()._requestID = newValue}
  }

  /// Compatibility fields for OneInch interface
  public var dstAmount: String {
    get {return _storage._dstAmount}
    set {_uniqueStorage()._dstAmount = newValue}
  }

  public var tx: VSKyberSwapTransaction {
    get {return _storage._tx ?? VSKyberSwapTransaction()}
    set {_uniqueStorage()._tx = newValue}
  }
  /// Returns true if `tx` has been explicitly set.
  public var hasTx: Bool {return _storage._tx != nil}
  /// Clears the value of `tx`. Subsequent reads from it will return its default value.
  public mutating func clearTx() {_uniqueStorage()._tx = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct VSKyberSwapPayload {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var fromCoin: VSCoin {
    get {return _storage._fromCoin ?? VSCoin()}
    set {_uniqueStorage()._fromCoin = newValue}
  }
  /// Returns true if `fromCoin` has been explicitly set.
  public var hasFromCoin: Bool {return _storage._fromCoin != nil}
  /// Clears the value of `fromCoin`. Subsequent reads from it will return its default value.
  public mutating func clearFromCoin() {_uniqueStorage()._fromCoin = nil}

  public var toCoin: VSCoin {
    get {return _storage._toCoin ?? VSCoin()}
    set {_uniqueStorage()._toCoin = newValue}
  }
  /// Returns true if `toCoin` has been explicitly set.
  public var hasToCoin: Bool {return _storage._toCoin != nil}
  /// Clears the value of `toCoin`. Subsequent reads from it will return its default value.
  public mutating func clearToCoin() {_uniqueStorage()._toCoin = nil}

  public var fromAmount: String {
    get {return _storage._fromAmount}
    set {_uniqueStorage()._fromAmount = newValue}
  }

  public var toAmountDecimal: String {
    get {return _storage._toAmountDecimal}
    set {_uniqueStorage()._toAmountDecimal = newValue}
  }

  public var quote: VSKyberSwapQuote {
    get {return _storage._quote ?? VSKyberSwapQuote()}
    set {_uniqueStorage()._quote = newValue}
  }
  /// Returns true if `quote` has been explicitly set.
  public var hasQuote: Bool {return _storage._quote != nil}
  /// Clears the value of `quote`. Subsequent reads from it will return its default value.
  public mutating func clearQuote() {_uniqueStorage()._quote = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=5.5) && canImport(_Concurrency)
extension VSKyberSwapTransaction: @unchecked Sendable {}
extension VSKyberSwapQuoteData: @unchecked Sendable {}
extension VSKyberSwapQuote: @unchecked Sendable {}
extension VSKyberSwapPayload: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "vultisig.keysign.v1"

extension VSKyberSwapTransaction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".KyberSwapTransaction"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "from"),
    2: .same(proto: "to"),
    3: .same(proto: "data"),
    4: .same(proto: "value"),
    5: .standard(proto: "gas_price"),
    6: .same(proto: "gas"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.from) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.to) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.data) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.value) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.gasPrice) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.gas) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.from.isEmpty {
      try visitor.visitSingularStringField(value: self.from, fieldNumber: 1)
    }
    if !self.to.isEmpty {
      try visitor.visitSingularStringField(value: self.to, fieldNumber: 2)
    }
    if !self.data.isEmpty {
      try visitor.visitSingularStringField(value: self.data, fieldNumber: 3)
    }
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 4)
    }
    if !self.gasPrice.isEmpty {
      try visitor.visitSingularStringField(value: self.gasPrice, fieldNumber: 5)
    }
    if self.gas != 0 {
      try visitor.visitSingularInt64Field(value: self.gas, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: VSKyberSwapTransaction, rhs: VSKyberSwapTransaction) -> Bool {
    if lhs.from != rhs.from {return false}
    if lhs.to != rhs.to {return false}
    if lhs.data != rhs.data {return false}
    if lhs.value != rhs.value {return false}
    if lhs.gasPrice != rhs.gasPrice {return false}
    if lhs.gas != rhs.gas {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension VSKyberSwapQuoteData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".KyberSwapQuoteData"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "amount_in"),
    2: .standard(proto: "amount_in_usd"),
    3: .standard(proto: "amount_out"),
    4: .standard(proto: "amount_out_usd"),
    5: .same(proto: "gas"),
    6: .standard(proto: "gas_usd"),
    7: .same(proto: "data"),
    8: .standard(proto: "router_address"),
    9: .standard(proto: "transaction_value"),
    10: .standard(proto: "additional_cost_usd"),
    11: .standard(proto: "additional_cost_message"),
    12: .standard(proto: "gas_price"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.amountIn) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.amountInUsd) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.amountOut) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.amountOutUsd) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.gas) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.gasUsd) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.data) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.routerAddress) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.transactionValue) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.additionalCostUsd) }()
      case 11: try { try decoder.decodeSingularStringField(value: &self.additionalCostMessage) }()
      case 12: try { try decoder.decodeSingularStringField(value: &self.gasPrice) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.amountIn.isEmpty {
      try visitor.visitSingularStringField(value: self.amountIn, fieldNumber: 1)
    }
    if !self.amountInUsd.isEmpty {
      try visitor.visitSingularStringField(value: self.amountInUsd, fieldNumber: 2)
    }
    if !self.amountOut.isEmpty {
      try visitor.visitSingularStringField(value: self.amountOut, fieldNumber: 3)
    }
    if !self.amountOutUsd.isEmpty {
      try visitor.visitSingularStringField(value: self.amountOutUsd, fieldNumber: 4)
    }
    if !self.gas.isEmpty {
      try visitor.visitSingularStringField(value: self.gas, fieldNumber: 5)
    }
    if !self.gasUsd.isEmpty {
      try visitor.visitSingularStringField(value: self.gasUsd, fieldNumber: 6)
    }
    if !self.data.isEmpty {
      try visitor.visitSingularStringField(value: self.data, fieldNumber: 7)
    }
    if !self.routerAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.routerAddress, fieldNumber: 8)
    }
    if !self.transactionValue.isEmpty {
      try visitor.visitSingularStringField(value: self.transactionValue, fieldNumber: 9)
    }
    if !self.additionalCostUsd.isEmpty {
      try visitor.visitSingularStringField(value: self.additionalCostUsd, fieldNumber: 10)
    }
    if !self.additionalCostMessage.isEmpty {
      try visitor.visitSingularStringField(value: self.additionalCostMessage, fieldNumber: 11)
    }
    if !self.gasPrice.isEmpty {
      try visitor.visitSingularStringField(value: self.gasPrice, fieldNumber: 12)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: VSKyberSwapQuoteData, rhs: VSKyberSwapQuoteData) -> Bool {
    if lhs.amountIn != rhs.amountIn {return false}
    if lhs.amountInUsd != rhs.amountInUsd {return false}
    if lhs.amountOut != rhs.amountOut {return false}
    if lhs.amountOutUsd != rhs.amountOutUsd {return false}
    if lhs.gas != rhs.gas {return false}
    if lhs.gasUsd != rhs.gasUsd {return false}
    if lhs.data != rhs.data {return false}
    if lhs.routerAddress != rhs.routerAddress {return false}
    if lhs.transactionValue != rhs.transactionValue {return false}
    if lhs.additionalCostUsd != rhs.additionalCostUsd {return false}
    if lhs.additionalCostMessage != rhs.additionalCostMessage {return false}
    if lhs.gasPrice != rhs.gasPrice {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension VSKyberSwapQuote: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".KyberSwapQuote"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "message"),
    3: .same(proto: "data"),
    4: .standard(proto: "request_id"),
    5: .standard(proto: "dst_amount"),
    6: .same(proto: "tx"),
  ]

  fileprivate class _StorageClass {
    var _code: Int32 = 0
    var _message: String = String()
    var _data: VSKyberSwapQuoteData? = nil
    var _requestID: String = String()
    var _dstAmount: String = String()
    var _tx: VSKyberSwapTransaction? = nil

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _code = source._code
      _message = source._message
      _data = source._data
      _requestID = source._requestID
      _dstAmount = source._dstAmount
      _tx = source._tx
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularInt32Field(value: &_storage._code) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._message) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._data) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._requestID) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._dstAmount) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._tx) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 1)
      }
      if !_storage._message.isEmpty {
        try visitor.visitSingularStringField(value: _storage._message, fieldNumber: 2)
      }
      try { if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      if !_storage._requestID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._requestID, fieldNumber: 4)
      }
      if !_storage._dstAmount.isEmpty {
        try visitor.visitSingularStringField(value: _storage._dstAmount, fieldNumber: 5)
      }
      try { if let v = _storage._tx {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: VSKyberSwapQuote, rhs: VSKyberSwapQuote) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._code != rhs_storage._code {return false}
        if _storage._message != rhs_storage._message {return false}
        if _storage._data != rhs_storage._data {return false}
        if _storage._requestID != rhs_storage._requestID {return false}
        if _storage._dstAmount != rhs_storage._dstAmount {return false}
        if _storage._tx != rhs_storage._tx {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension VSKyberSwapPayload: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".KyberSwapPayload"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "from_coin"),
    2: .standard(proto: "to_coin"),
    3: .standard(proto: "from_amount"),
    4: .standard(proto: "to_amount_decimal"),
    5: .same(proto: "quote"),
  ]

  fileprivate class _StorageClass {
    var _fromCoin: VSCoin? = nil
    var _toCoin: VSCoin? = nil
    var _fromAmount: String = String()
    var _toAmountDecimal: String = String()
    var _quote: VSKyberSwapQuote? = nil

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _fromCoin = source._fromCoin
      _toCoin = source._toCoin
      _fromAmount = source._fromAmount
      _toAmountDecimal = source._toAmountDecimal
      _quote = source._quote
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._fromCoin) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._toCoin) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._fromAmount) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._toAmountDecimal) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._quote) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._fromCoin {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._toCoin {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      if !_storage._fromAmount.isEmpty {
        try visitor.visitSingularStringField(value: _storage._fromAmount, fieldNumber: 3)
      }
      if !_storage._toAmountDecimal.isEmpty {
        try visitor.visitSingularStringField(value: _storage._toAmountDecimal, fieldNumber: 4)
      }
      try { if let v = _storage._quote {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: VSKyberSwapPayload, rhs: VSKyberSwapPayload) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._fromCoin != rhs_storage._fromCoin {return false}
        if _storage._toCoin != rhs_storage._toCoin {return false}
        if _storage._fromAmount != rhs_storage._fromAmount {return false}
        if _storage._toAmountDecimal != rhs_storage._toAmountDecimal {return false}
        if _storage._quote != rhs_storage._quote {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
