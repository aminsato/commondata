// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: vultisig/keysign/v1/thorchain_swap_payload.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct VSTHORChainSwapPayload {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var fromAddress: String {
    get {return _storage._fromAddress}
    set {_uniqueStorage()._fromAddress = newValue}
  }

  public var fromCoin: VSCoin {
    get {return _storage._fromCoin ?? VSCoin()}
    set {_uniqueStorage()._fromCoin = newValue}
  }
  /// Returns true if `fromCoin` has been explicitly set.
  public var hasFromCoin: Bool {return _storage._fromCoin != nil}
  /// Clears the value of `fromCoin`. Subsequent reads from it will return its default value.
  public mutating func clearFromCoin() {_uniqueStorage()._fromCoin = nil}

  public var toCoin: VSCoin {
    get {return _storage._toCoin ?? VSCoin()}
    set {_uniqueStorage()._toCoin = newValue}
  }
  /// Returns true if `toCoin` has been explicitly set.
  public var hasToCoin: Bool {return _storage._toCoin != nil}
  /// Clears the value of `toCoin`. Subsequent reads from it will return its default value.
  public mutating func clearToCoin() {_uniqueStorage()._toCoin = nil}

  public var vaultAddress: String {
    get {return _storage._vaultAddress}
    set {_uniqueStorage()._vaultAddress = newValue}
  }

  public var routerAddress: String {
    get {return _storage._routerAddress ?? String()}
    set {_uniqueStorage()._routerAddress = newValue}
  }
  /// Returns true if `routerAddress` has been explicitly set.
  public var hasRouterAddress: Bool {return _storage._routerAddress != nil}
  /// Clears the value of `routerAddress`. Subsequent reads from it will return its default value.
  public mutating func clearRouterAddress() {_uniqueStorage()._routerAddress = nil}

  public var fromAmount: String {
    get {return _storage._fromAmount}
    set {_uniqueStorage()._fromAmount = newValue}
  }

  public var toAmountDecimal: String {
    get {return _storage._toAmountDecimal}
    set {_uniqueStorage()._toAmountDecimal = newValue}
  }

  public var toAmountLimit: String {
    get {return _storage._toAmountLimit}
    set {_uniqueStorage()._toAmountLimit = newValue}
  }

  public var streamingInterval: String {
    get {return _storage._streamingInterval}
    set {_uniqueStorage()._streamingInterval = newValue}
  }

  public var streamingQuantity: String {
    get {return _storage._streamingQuantity}
    set {_uniqueStorage()._streamingQuantity = newValue}
  }

  public var expirationTime: UInt64 {
    get {return _storage._expirationTime}
    set {_uniqueStorage()._expirationTime = newValue}
  }

  public var isAffiliate: Bool {
    get {return _storage._isAffiliate}
    set {_uniqueStorage()._isAffiliate = newValue}
  }

  public var fee: String {
    get {return _storage._fee}
    set {_uniqueStorage()._fee = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=5.5) && canImport(_Concurrency)
extension VSTHORChainSwapPayload: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "vultisig.keysign.v1"

extension VSTHORChainSwapPayload: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".THORChainSwapPayload"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "from_address"),
    2: .standard(proto: "from_coin"),
    3: .standard(proto: "to_coin"),
    4: .standard(proto: "vault_address"),
    5: .standard(proto: "router_address"),
    6: .standard(proto: "from_amount"),
    7: .standard(proto: "to_amount_decimal"),
    8: .standard(proto: "to_amount_limit"),
    9: .standard(proto: "streaming_interval"),
    10: .standard(proto: "streaming_quantity"),
    11: .standard(proto: "expiration_time"),
    12: .standard(proto: "is_affiliate"),
    13: .same(proto: "fee"),
  ]

  fileprivate class _StorageClass {
    var _fromAddress: String = String()
    var _fromCoin: VSCoin? = nil
    var _toCoin: VSCoin? = nil
    var _vaultAddress: String = String()
    var _routerAddress: String? = nil
    var _fromAmount: String = String()
    var _toAmountDecimal: String = String()
    var _toAmountLimit: String = String()
    var _streamingInterval: String = String()
    var _streamingQuantity: String = String()
    var _expirationTime: UInt64 = 0
    var _isAffiliate: Bool = false
    var _fee: String = String()

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _fromAddress = source._fromAddress
      _fromCoin = source._fromCoin
      _toCoin = source._toCoin
      _vaultAddress = source._vaultAddress
      _routerAddress = source._routerAddress
      _fromAmount = source._fromAmount
      _toAmountDecimal = source._toAmountDecimal
      _toAmountLimit = source._toAmountLimit
      _streamingInterval = source._streamingInterval
      _streamingQuantity = source._streamingQuantity
      _expirationTime = source._expirationTime
      _isAffiliate = source._isAffiliate
      _fee = source._fee
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._fromAddress) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._fromCoin) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._toCoin) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._vaultAddress) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._routerAddress) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._fromAmount) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._toAmountDecimal) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._toAmountLimit) }()
        case 9: try { try decoder.decodeSingularStringField(value: &_storage._streamingInterval) }()
        case 10: try { try decoder.decodeSingularStringField(value: &_storage._streamingQuantity) }()
        case 11: try { try decoder.decodeSingularUInt64Field(value: &_storage._expirationTime) }()
        case 12: try { try decoder.decodeSingularBoolField(value: &_storage._isAffiliate) }()
        case 13: try { try decoder.decodeSingularStringField(value: &_storage._fee) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._fromAddress.isEmpty {
        try visitor.visitSingularStringField(value: _storage._fromAddress, fieldNumber: 1)
      }
      try { if let v = _storage._fromCoin {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._toCoin {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      if !_storage._vaultAddress.isEmpty {
        try visitor.visitSingularStringField(value: _storage._vaultAddress, fieldNumber: 4)
      }
      try { if let v = _storage._routerAddress {
        try visitor.visitSingularStringField(value: v, fieldNumber: 5)
      } }()
      if !_storage._fromAmount.isEmpty {
        try visitor.visitSingularStringField(value: _storage._fromAmount, fieldNumber: 6)
      }
      if !_storage._toAmountDecimal.isEmpty {
        try visitor.visitSingularStringField(value: _storage._toAmountDecimal, fieldNumber: 7)
      }
      if !_storage._toAmountLimit.isEmpty {
        try visitor.visitSingularStringField(value: _storage._toAmountLimit, fieldNumber: 8)
      }
      if !_storage._streamingInterval.isEmpty {
        try visitor.visitSingularStringField(value: _storage._streamingInterval, fieldNumber: 9)
      }
      if !_storage._streamingQuantity.isEmpty {
        try visitor.visitSingularStringField(value: _storage._streamingQuantity, fieldNumber: 10)
      }
      if _storage._expirationTime != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._expirationTime, fieldNumber: 11)
      }
      if _storage._isAffiliate != false {
        try visitor.visitSingularBoolField(value: _storage._isAffiliate, fieldNumber: 12)
      }
      if !_storage._fee.isEmpty {
        try visitor.visitSingularStringField(value: _storage._fee, fieldNumber: 13)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: VSTHORChainSwapPayload, rhs: VSTHORChainSwapPayload) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._fromAddress != rhs_storage._fromAddress {return false}
        if _storage._fromCoin != rhs_storage._fromCoin {return false}
        if _storage._toCoin != rhs_storage._toCoin {return false}
        if _storage._vaultAddress != rhs_storage._vaultAddress {return false}
        if _storage._routerAddress != rhs_storage._routerAddress {return false}
        if _storage._fromAmount != rhs_storage._fromAmount {return false}
        if _storage._toAmountDecimal != rhs_storage._toAmountDecimal {return false}
        if _storage._toAmountLimit != rhs_storage._toAmountLimit {return false}
        if _storage._streamingInterval != rhs_storage._streamingInterval {return false}
        if _storage._streamingQuantity != rhs_storage._streamingQuantity {return false}
        if _storage._expirationTime != rhs_storage._expirationTime {return false}
        if _storage._isAffiliate != rhs_storage._isAffiliate {return false}
        if _storage._fee != rhs_storage._fee {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
